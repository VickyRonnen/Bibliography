package Bibliography.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AthorElement;
  private ConceptPresentation props_Author;
  private ConceptPresentation props_AuthorRef;
  private ConceptPresentation props_Authors;
  private ConceptPresentation props_BiblioElement;
  private ConceptPresentation props_BiblioRecord;
  private ConceptPresentation props_Bibliography;
  private ConceptPresentation props_EtAlAuthor;
  private ConceptPresentation props_Person;
  private ConceptPresentation props_PublicationYear;
  private ConceptPresentation props_Title;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AthorElement:
        if (props_AthorElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AthorElement");
          props_AthorElement = cpb.create();
        }
        return props_AthorElement;
      case LanguageConceptSwitch.Author:
        if (props_Author == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Author = cpb.create();
        }
        return props_Author;
      case LanguageConceptSwitch.AuthorRef:
        if (props_AuthorRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AuthorRef = cpb.create();
        }
        return props_AuthorRef;
      case LanguageConceptSwitch.Authors:
        if (props_Authors == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Stores details about the authors of a bibliographical record");
          cpb.rawPresentation("authors");
          props_Authors = cpb.create();
        }
        return props_Authors;
      case LanguageConceptSwitch.BiblioElement:
        if (props_BiblioElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A bibliographical element");
          props_BiblioElement = cpb.create();
        }
        return props_BiblioElement;
      case LanguageConceptSwitch.BiblioRecord:
        if (props_BiblioRecord == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A bibliographical record, article, wep page, etc.");
          cpb.presentationByName();
          props_BiblioRecord = cpb.create();
        }
        return props_BiblioRecord;
      case LanguageConceptSwitch.Bibliography:
        if (props_Bibliography == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A list of bibliographical records");
          cpb.presentationByName();
          props_Bibliography = cpb.create();
        }
        return props_Bibliography;
      case LanguageConceptSwitch.EtAlAuthor:
        if (props_EtAlAuthor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EtAlAuthor = cpb.create();
        }
        return props_EtAlAuthor;
      case LanguageConceptSwitch.Person:
        if (props_Person == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Person = cpb.create();
        }
        return props_Person;
      case LanguageConceptSwitch.PublicationYear:
        if (props_PublicationYear == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("publication year");
          props_PublicationYear = cpb.create();
        }
        return props_PublicationYear;
      case LanguageConceptSwitch.Title:
        if (props_Title == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("The title of a bibliographical record");
          cpb.rawPresentation("title");
          props_Title = cpb.create();
        }
        return props_Title;
    }
    return null;
  }
}
